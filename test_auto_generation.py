#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑."""

import requests
import json
import time

def test_auto_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–∏–ø–æ—Ç–µ–∑."""
    base_url = "http://localhost:8000"
    
    print("=== –¢–ï–°–¢ –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–ò –ì–ò–ü–û–¢–ï–ó ===")
    print()
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã
    print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã...")
    try:
        response = requests.get(f"{base_url}/v1/hypothesis/list?limit=10")
        if response.status_code == 200:
            hypotheses = response.json()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–∏–ø–æ—Ç–µ–∑: {len(hypotheses)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–∞—Ç –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print("\n2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç...")
    chat_payload = {
        "messages": [
            {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ –∫–æ—Å–º–æ—Å–µ"}
        ],
        "use_context": False,
        "include_sources": False,
        "stream": False
    }
    
    try:
        response = requests.post(
            f"{base_url}/v1/chat/completions",
            json=chat_payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   üìù –û—Ç–≤–µ—Ç: {result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:100]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –®–∞–≥ 3: –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n3. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (3 —Å–µ–∫—É–Ω–¥—ã)...")
    time.sleep(3)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã
    print("\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã...")
    try:
        response = requests.get(f"{base_url}/v1/hypothesis/list?limit=10")
        if response.status_code == 200:
            hypotheses = response.json()
            auto_hypotheses = [h for h in hypotheses if "auto" in h.get('tags', [])]
            
            print(f"   üìä –í—Å–µ–≥–æ –≥–∏–ø–æ—Ç–µ–∑: {len(hypotheses)}")
            print(f"   üîÑ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(auto_hypotheses)}")
            
            if auto_hypotheses:
                print("\n   üìã –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã:")
                for i, hyp in enumerate(auto_hypotheses, 1):
                    print(f"      {i}. {hyp.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"         ID: {hyp.get('id')}")
                    print(f"         –¢–µ–≥–∏: {hyp.get('tags', [])}")
                    print(f"         –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {hyp.get('confidence', 0)}")
                    print(f"         –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {hyp.get('priority', 3)}")
                    print()
            else:
                print("   ‚ö†Ô∏è –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–∏–ø–æ—Ç–µ–∑—ã
    print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–∏–ø–æ—Ç–µ–∑—ã...")
    manual_payload = {
        "last_user_message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
        "assistant_response": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
        "reflection": None,
        "top_memory_limit": 3,
        "tags": ["test", "manual"]
    }
    
    try:
        response = requests.post(
            f"{base_url}/v1/hypothesis/generate",
            json=manual_payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ –ì–∏–ø–æ—Ç–µ–∑–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   üè∑Ô∏è –¢–µ–≥–∏: {result.get('tags', [])}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")

if __name__ == "__main__":
    test_auto_generation()
